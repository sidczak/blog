<?php

namespace BlogBundle\Repository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPostsFromCategory($category_id = null, $max = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('p');

        if($category_id)
        {
            $qb->andWhere('p.category = :category_id')
              ->setParameter('category_id', $category_id);
        }
        
        if($max)
        {
            $qb->setMaxResults($max);
        }
        
        if($offset)
        {
            $qb->setFirstResult($offset);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    public function countPostsFromCategory($category_id = null)
    {
        $qb = $this->createQueryBuilder('p');
        
        if($category_id)
        {
            $qb->andWhere('p.category = :category_id')
              ->setParameter('category_id', $category_id);
        }

        $query = $qb->getQuery();

        return count($query->getResult());
    }
    
    public function getPostsFromTag($tag_id = null, $max = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('p');

        if($tag_id)
        {
            $qb->innerJoin('p.tags', 'pt')
              ->where('pt.id = :tag_id')
              ->setParameter('tag_id', $tag_id);
        }
        
        if($max)
        {
            $qb->setMaxResults($max);
        }
        
        if($offset)
        {
            $qb->setFirstResult($offset);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    public function countPostsFromTag($tag_id = null)
    {
        $qb = $this->createQueryBuilder('p');

        if($tag_id)
        {
            $qb->innerJoin('p.tags', 'pt')
              ->where('pt.id = :tag_id')
              ->setParameter('tag_id', $tag_id);
        }

        $query = $qb->getQuery();

        return count($query->getResult());
    }
    
    public function getArchives()
    {
        //SELECT year(published_at),month(published_at),count(published_at) FROM `post` group by year(published_at), month(published_at)
        
        $qb = $this->createQueryBuilder('p')
            ->select('p.published_at as publishedat, YEAR(p.published_at) as year, MONTH(p.published_at) as month, COUNT(p.published_at) as post')
            ->groupBy('year')
            ->groupBy('month')
            ->orderBy('p.published_at', 'DESC');
        
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
    public function getPostFromArchives($year = null, $month = null, $max = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('p');
        
        if($year)
        {
            $qb->andWhere('YEAR(p.published_at) = :year')
              ->setParameter('year', $year);
        }
        
        if($month)
        {
            $qb->andWhere('MONTH(p.published_at) = :month')
              ->setParameter('month', $month);
        }
        
        if($max)
        {
            $qb->setMaxResults($max);
        }
        
        if($offset)
        {
            $qb->setFirstResult($offset);
        }
        
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
}
